Codifica del testo
- si usa l'Ascii (American Standard Code for Information Interchange)
- usa 7 bit, l'extendend usa anche il bit più significativo, quindi 8 bit
NB: 0x denota l'utilizzo di codifica esadecimale
- nel ex-ASCII, ci sono vari tipi in base al tipo di lettere usate (8859-1 - caratteri europa occidentale, 8859-5 - cirillico,...)
 - problema di condivisione 
per ulteriori caratteri si utilizza l'unicode o UTF, nelle vari versioni utf 32,16,8. l'UTF-8 è compatibile con ASCII

4 reti logiche
- nei circuiti elettronici, i transistor hanno 2 livelli: uno alto per 1 e uno basso per 0
- le reti logiche sono circuiti che dati valori logici in entrata, ne forniscono altri un uscita
 - possono essere combinatorie, cioé senza memoria e l'uscita dipende solo dal valore in ingresso
 - possono essere sequenziali, cioé hanno memoria e l'uscita dipende anche dai precedenti ingressi
- tabella di verità, espone gli uotput di tutte le combinazioni di input

Algebra di Boole
- gli operatori di base sono l'AND (.), l'OR (+) e il NOT (_)
-proprietà
 - A+0=A, A.1=A (identità)
 - A+1=1, A.0=0 (zero e uno)
 - A+_A=1, A._A=0 (inversa)
 - A+B=B+A, A.B=B.A (commutativa)
 - A+(B+C)=(A+B)+C, A.(B.C)=(A.B).C (associativa)
 - A.(B+C)=(A.B)+(A.C), A+(B.C)=(A+B).(A+C) (distributiva)
:
 - _A.B_=_A+_B
 - _A+B_=_A._B
- queste ultime due regole introducono il NAND (NOT AND) e il NOR (NOT OR)

- simboli. AND D, OR D>, NOT >° oppure °

PLA (Programmable Logic Array)
- questa struttura è formata da un barriera di AND (mintermini) e una barriera di OR
- le funzione logiche hanno un costo rappresentato dal numero di porte e ingressi nella rete. Esistono vari metodi per ridurre il costo, questi sono di tipo sistematico o grafico e si riuniscono sotto la "sintesi logica" 

5 Reti sequenziali
- generalmente discutiamo di reti logiche dove in un istante viene dato un output, e nell'istante successivo quell'output fa parte dei parametri in input
- l'elemento base di memoria è chiamato latch, ed è composto da due porte NOR
- dato che i segnali richiedono tempo per propagarsi, questo può causare errori, allora si utilizza il clock per temporizzare le azioni. I latch temporizzati vengono chiamati gated latch
- per controllare le i gated latch, si aggiunge 2 AND sugli ingressi di set e reset 
- per risolvere il doppio 1 nei latch S-R si usufruisce dei latch-D e flip flop
- Il latch-D riceve S e R da un unica variabile messa in NOT su R
- il flip-flop usufruisce di due latch e della negazione del clock, andando a separare nel tempo gli input

- questi elementi di memorizzazione servono per strutturare i registri, cioé una serie di latch in grado di memorizzare una word di dati. Il loro funzionamento avviene al fronte in salita del clock.
- questi funzionamenti in base al clock vengono definiti come edge triggered, e offrono il vantaggio di rimuovere le situazioni di corse.


6 Struttura di un programma assembly
- fetch: preleva un'istruzione dalla memoria
- decode: decodifica l'istruzione
- execute: eseguisce l'istruzione

- un programma in assembly è una lista di istruzioni sequenziali con la presenza di salti

- le istruzioni
 - operazioni aritmetico logiche
 - movimenti di dati/assegnazioni di valore
 - controlli di flusso

- tipi di dati
 - immediati (constanti)
 - contenuti in registri (general purpose/specializzato, da 4 a 64)
 - contenuti in memoria

risc: semplifica l'implementazione della cpu
- istruzioni aritmentico-logiche: <opcode> <dst>, <arg1>, <arg2>
- accesso alla memoria:
 - load <reg>, <mem loc>
 - store <mem loc>, <reg>
 - intel, risc-v

cisc: semplifica la scrittura dei programmi in assembly
 - istruzioni aritmentico-logiche: hanno operandi e/o destinazioni in memoria
 - più istruzioni
 - sintassi meno regolare
 - ARM

Accessi alla memoria
- load e store per risc
- generiche per cisc
- argomento <memory location>
 - ind. memoria costante
 - registro
 - shiftando un registro
 - combinazione

Indirizzamento
- assoluto: indirizzo codificato
- indiretto: registro contendente indirizzo codificato
- base + spiazzamento: indirizzo otttenuto sommando registro a valore
- base + indice: indirizzo ottenuto sommando registro a registro shiftato
- base + indice + spiazzamente: vedi precedenti

- ISA risc usano modalità semplici (assoluto)
- ISA cisc usano indirizzamento con indice shiftato
 - eccezzione ARM (pre/post-incremento)

ISA & ABI
- ISA definisce le istruzioni della CPU e registri (general-purpose vs specializzati)
- come usarli? tramite una convenzione software
- ABI: insieme di convenzioni software sull'utilizzo dei registri
 - esampio: le chiamate

Instruction set
 - diverso per ogni tipo di processore

RISC-V 
- ripo risc, moderno, open source
principio di progettazione n.1: la semplicità favorisce la regolarità
- prevede solo istruzioni aritmentiche a tre operandi:
 - a = b + c => add a, b, c
 - a = b + c + d + e => 
   add a, b, c
   add a, a, d 
   add a, a, e
 - f = (g+h) - (i+j) =>
   add t0, g, h 
   add t1, i, j
   sub f, t0, t1
- commenti con # 
- Risc-v contiene 32 registri a 64 bit
principio di progettazione n.2: minori sono le dimensioni, maggiore la velocità
- convertendo l'esempio di prima:
 - f = (g+h) - (i+j) =>
   add x5, x20, x21 
   add x6, x22, x23
   sub x19, x5, x6

servono istruzioni per caricare e scaricare dati dalla memoria
memoria(sequenza di byte collegati a un indirizzo). i byte vengono organizzati in parole
da 4 byte o doppie parole da 8 byte
gli indirizzi si specificano tramite una base (registro) e un offset
Caricamento doppia parola in un indirizzo dato da x22 + 8: ld x9 8(x22)
ld = istruzione load
x9 = registro di destinazione
8 = offset
(x22) = base

register spilling: caricamento e scaricamento delle variabili nei registri in base al loro utilizzo

l'approccio con le costanti  avviene tramite la memorizzazione del dato in
qualche indirizzo. Questo risulta inefficente, quindi si usano gli operandi immediati
es: f = f + 4 => addi x22, x22, 4

RISC-V dedica un registro ad hoc (x0) alla costante 0

I numeri vengono rappresentati in esadicmale (2 cifre esa => 1 byte). una word
(es: 0xEA01BD1C) allora viene caratterizzata dai byte + o - significativi (il primo e l'ultimo)
little endian: la memorizzazione della word parte dal byte meno significativo e sale
big endian: al contrario del little endian, la word parte dal byte più significativo e scende
little viene usato in architetture intel e RISC-V, il big da motorola e protocolli internet

le istruzioni vanno convertite in codici numerici univoci, da 32 bit in RISC-V:
- primo (7bit), quarto (3bit) e sesto (7bit) codificano l'istruzione
- secondo (5 bit) : secondo operando
- terzo (5 bit): primo operando
- quinto (5 bit): risultato
=> |funz7|rs2|rs1|funz3|rd|codop| =>
codop: codice operativo dell’istruzione
funz7 efunz3: codici operativi aggiuntivi
rs1: primo operando sorgente
rs2: secondo operando sorgente
rd: operando destinazione

Trade-off 
principio di progettazione n.3:
un buon progetto richiede buoni compromessi
RISC-V con le sue istruzioni a 32 bit limita il numero di istruzioni, di registri e di modalità d'indirizzamento,
ma ci guadagna in efficenza

Operazioni logiche
RISC-V offre varie funzioni per operare su porzioni di words o su singolo bit:

Shift logico
si usa per inserire degli zeri nella posizione meno significativa (shift a sinistra) o nella posizione più significativa (shift a destra)
slli x11, x19, 4 => memorizzare in x11 il valore di x19 moltiplicato per 2^4
srli x11, x19, 4 => memorizzare in x11 il valore di x19 diviso per 2^4
Questo può generare degli overflow. Per risolvere questo problema si utilizza lo shift aritmentico (questo funziona
solo con lo shift a destra): invece di aggiungere bit pari a 0, si aggiungono bit
pari al bit di segno
srai x11, x19, 4

altre operazioni logiche sono:
AND bit a bit:
and x9, x10, x11 => la word salvata in x9 a i bit che corrispondono al risultato dell'AND tra x10 e x11
(fondamentalmente tiene a 1 solo i bit che sono a 1 in entrambe le word)
OR bit a bit
simile al AND ma utilizza un operatore OR
or x9, x9, 19
OR esclusivo (XOR)
mantiene il bit a 1 solamente se i due bit confrontati sono differenti
per esempio si usa lo xor per resettare un registro => xor x9, x9, x9
NOT
il not è un'operatore unario e di conseguenza non è supportato da RISC-V, ma si può ottenerlo
attraverso un XOR: NOT A => XOR (A, 1)

istruzioni con condizioni
nelle architetture le condizioni si convertono in istruzioni di salto condizionato. esso è dato da due istruzioni:
beq rs1, rs2, L1 => se rs1 è uguale a rs2 allora salta all'etichetta L1
bne rs1, rs2, L1 => se rs1 è diverso a rs2 allora salta all'etichetta L1
es:
costrutto if: if(i==j) f=g+h; else f=g-h;
      bne x22, x23, ELSE 
      add x19, x20, x21   
      beq x0, x0, ESCI
ELSE: sub x19, x20, x21
ESCI:

Cicli
sfruttando i salti condizionati si possono creare dei loop 
Ciclo:  slli x10, x22, 3
        add x10, x10, x25
        ld x9, 0(x10)
        bne x9, x24, Esci   
        addi x22, x22, 1
        beq x0, x0, Ciclo
Esci:   ...

considerazioni
le istruzioni tra 2 salti condizionati (conditional branch) vengono chiamati blocchi di base
l'individuazione di questi blocchi è una delle prime fasi della compilazione

ulteriori istruzioni di salto
blt => salta se minore
bge => salta se maggiore o uguale
bltu => blt ma unsigned
bgeu => bge ma unsigned
le versioni unsigned semplicemente tengono conto o meno del bit significativo

costrutto switch
memorizza i vari codici da eseguire in una tabella, per poi caricare in un registro l'indirizzo del codice.
infine tramite l'istruzione jalr si salta all'indirizzo contenuto nel registro

Procedure
le funzioni svolgono un ruolo fondamentale, non ci interessa il funzionamento interno di una funzione,
ma necessitiamo di un protocollo per la chiamate alle procedure:
1 caricare i parametri di input in posti noti a priori
2 trasferire il controllo alla procedura
  - acquisire i parametri in input
  - eseguire la procedura
  - caricare i valori di ritorno in posti noti
  - restituire il controllo al chiamante
3 prendere i valori di ritorno e pulire le tracce della procedura
RISC-V affronta questo meccanismo usando il più possibile i registri. le convenzioni sono:
x10-x17: usato per parametri in ingresso e valori di ritorno
x1: indirizzo di ritorno
 - questo indirizzo viene usato particolarmente per istruzioni di jump and link (jal), che effettuano il salto
 e memorizzano in x1 l'indirizzo di ritorno
 - alla fine della procedura sarà sufficiente fare un salto (jalr x0, 0(x1))
nel caso i registri non bastino si usa lo stack x2, chiamato anche sp. Alla fine della procedura è importante
ricordare di pulire lo stack

esempio =>
long long int esempio_foglia(long long int g, long long int h, long long int i, long long int j) {
  long long int f;
  f = (g+h) – (i+j);
  return f;
}

- come prima fase il compilatore etichetta la procedura (esempio_foglia), questa fare è chiamata linking
- prologo, ovvero la fase in cui vengono salvati in memoria tutti i registri usati dalla procedura
- esecuzione della procedura
- epilogo, fase di ripristino dei registri e settagio del valore di ritorno

tutto questo è una menzogna, RISC-V adotta la convenzione:
 x5-x7 e x28-x31 sono registri temporanei
 x8-x9 e x18-x27 sono registri in cui salvare il contenuto in caso di chiamata a procedura
La cosa può essere ancora più complessa in caso di variabili locali e procedure annidate. Questo si risolvere
usando lo stack allocando variabili locali e valori del registro di ritorno x1

Storage class
le variabili in C sono associate a locazioni di memoria caratterizzate per tipo e storage class. Il C ha due tipi
di storage class: Automatic (le variabili locali) e Static. Le variabili static vengono memorizzate da RISC-V
nel registro x3, chiamato anche gp (global pointer). Per quello che riguarda le automatic, esse sono memorizzate
nei registri o nello stack in caso i registri non bastassero

record di attivazione
Il segmento di stack che contiene variabili locali e i registri salvati è chiamato record di attivazione
(o stack frame). Le variabili locali sono individuate tramite un offset. In alcuni casi il registro
sp può essere scomodo, percui in alcuni programmi viene usato il registro x8 come fp o frame pointer,
come puntato alla prima parola doppia del frame della procedura

Dati dinamici
per tutti le variabili allocate dinamicamente, RISC-V procede per indirizzi crescenti

Riassunto convenzione sui registri:
(immagine pagina 25, pdf n3)

(elaborazione)
spesso la ricorsione può essere inefficente, conviene piuttosto generare una ricorsione 
"di coda", cioé che tiene conto del procedimento e ritorna direttamente il risultato

(Ottimizzazione)
alcuni compilatori sanno riconoscere la ricorsione di coda. Le caratteristiche
principali sono: il chiamante ritrna subito dopo la jalr, x5 e gli altri registri non cambiano,
il chiamato protrebbe direttamente ritornare al ra del chiamante...
gcc fa questo con opportuni flag 


intel
- architettura CISC utilizzata soprattutto in laptop, desktop e server
- usufruisce di molteplici modalità di funzionamento e molteplici assembler
 - useremo GNU assembler

registri
- registri general purpouse
 - sono 16 da 64bit e usano il prefisso % 
 - %rsp: stack pointer
 - %sbp: base pointer
 - %rsi e %rdi: registri source e destination per la copia di Array

 - %rip: Instruction pointer
 - %rflags: estende %flags, che contiene flag come CF (flag di carry), ZF(risultato 0), SF(risultato negativo), OF(flag di overflow)
  - sono usati da istruzioni di salto condizionale

Convenzioni di chiamata
- sono molteplici, tecnicamente specificate dall'ABI
- i primi 6 argomenti sono in %rdi, %rsi, %rdx, %rcx, %r8 ed %r9, gli altri vengono impilati nello stack
- valori di ritorno in %rax e %rdx
- registri preservati %rbp, %rbx, %r12, %r13, %r14 ed %r15

Indirizzamento
- Istruzioni principalmente a 2 operandi (destinazione implicita)
 - Sorgente: operando immediato($20), registro (%rax), memoria (0x0100A8)
 - destinazione: registro o memoria
- accesso alla memoria: <displ> (<base reg>, <index reg>, <scale>)
 - <displacement>: costante a 8, 16 o 32bit
 - <base>: valore in registro 
 - <indice>: valore in registro 
 - <scala>: valore costante
 - in casi speciali scala, indice, base e displacement possono essere omessi

Istruzioni intel
- fondamentalmente sono una caterba
- sintassi <opcode> <source>, <destination>
 - <opcode> può terminare con b/w/l/q per indicare 8/16/32/64bit
- istruzioni comuni
 - mov, add, sub, mul, div, inc/dec (incrementa/decrementa di 1), rcl/rcr/rol/ror (rotate),
   sal/sar/shl/shr (shift aritmentici e logici), and, or, xor, not, neg(complemento a 2, negazione),
   nop.
 - push/pop: inserisce/rimuove dati nello stack
 - cmp/test: comparano i 2 argomenti e settano i flag nel flag register
 - jmp, je/jnz/jc/jnc: salti condizionati
 - call/ret: chiamata/ritorno alla procedura
- Load effective address: lea è un istruzione utilizzata per calcolare indirizzi
 - calcola l'indirizzo e memorizza nel registro senza caricare nulla dalla memoria, ogni tanto viene
   usato per fare somme
 - es: lea 80(%rdx, %rcx, 2), %rax => %rax = %rdx + 2*%rcx +80
 - es: lea (%rbx, %rcx), %rax



ARM
- Advanced Risc Machine
- usato nei sistemi embedded e in smartphone e tablet
- 16 registri e modalità d'indirizzamento potenti
- precisazioni, ARM è una famiglia di CPU, con ISA differenti ma simili fra loro 

registri
- 16 registri a 32 bit, r0-r15, quasi tutti general purpouse (r15 non lo è)
 - alcuni registri hanno sinonimi: r13=sp(stack pointer) e r14=lr(link register)
 - Application Program Status Register (apsr) / Current Program StatusRegister (cpsr) ?
 - r15 contiene il pc(program counter) e i flags (bit 28..31)
 - flags: z | c | n | v
  - eq/ne: equal/not equal => z = 1/0
  - hs/lo: higher or same/lower => c = 1/0
  - mi/pl: negativo o positivo => n = 1/0
  - vs/vs: presenza o meno di overflow => v = 1/0
  - hi: higher => c = 1 | z = 0
  - ls: lower or same => c = 0 oppure z = 1
  - ge: greater or equal => n = 1 | v = 1 oppure n = 0 | v = 0
  - lt: less than => n = 1 | v = 0 oppure n = 0 | v = 1
  - gt: greater than => come ge ma con z = 0
  - le: less or equal => come lt, ma esegue anche se z = 1

Convenzioni di chiamata
- r0-r3 sono registri temporanei non preservati, con più di 4 argomenti si usa lo stack
- r4-r11 registri preservati (in alcune ABI r9 non è preservato)
- r0-r1 valori di ritorno

Indirizzamento
- istruzioni prevalentemente a 3 argomenti
 - operando sinistro = registro, operando destro = immediato o registro
- accesso alla memoria con ldr/str (load register/store register) e ldm/stm (load/store multiple)


##################################################################################################
Processore
##################################################################################################

panoramica
- nell'esecuzione delle istruzioni, ci sono due fasi iniziali comuni
 - prelievo dell'istruzione dalla memoria
 - lettura dei registri
- i passi sccessivi sono simili, ma dipendono dall'istruzione

-le istruzioni più comuni usano la alu 
 - calcolo dell'indirizzo per l'accesso alla memoria
 - istruzioni aritmentico logiche
 - confrontare le condizioni per eseguire dei salti
- successivamente le tre classi divergono
 - le istruzioni d'accesso alla memoria salvano il dato in memoria
 - le istruzioni aritmetico logiche memorizzano il risultato nel registro
 - le istruzioni di salto cambiano il valore del registro PC in base al confronto

Il processore utilizza anche i multiplexer per effettuare decisioni. Per esempio le istruzioni
possono provenire dal banco dei registri o dal codice dell'istruzione stessa, per selezionare
i due tipi, viene usato un multiplexer. Oppure per far decidere alla ALU che operazione effettuare,
dai banchi dei registri per decidere in quale registro scrivere o dalla memoria dati per determinare
se vogliamo leggere o scrivere. Per decidere come utilizzare i vari ingressi di controllo viene 
utilizzata un'unità specifica.

informazioni di base
assunzione: il processore lavora sincronizzandosi con i cicli di clock, assumiamo che tutte le 
  istruzioni si svolgano in un singolo ciclio di clock

